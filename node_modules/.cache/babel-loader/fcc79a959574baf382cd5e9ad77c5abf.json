{"ast":null,"code":"import { Auth } from '../api/api';\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS'; // s2000promax@gmail.com\n// qh5S!C2s!x3MNvB\n\n/*\r\nexport type InitialStateType2 = {\r\n    userId : number | null, \r\n    email: string | null, \r\n    login: string | null,\r\n    isAuth: boolean,\r\n    captchaUrl: string | null\r\n}\r\n*/\n\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        userId: 123,\n        ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => {\n  return {\n    type: SET_USER_DATA,\n    payload: {\n      userId,\n      email,\n      login,\n      isAuth\n    }\n  };\n};\nexport const getCaptchaUrlSuccess = captchaUrl => {\n  return {\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {\n      captchaUrl\n    }\n  };\n};\nexport const getAuthUserData = () => async dispatch => {\n  let response = await Auth.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      email,\n      id,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await Auth.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {}\n};\n/*   \r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n   let response = await Auth.login(email, password, rememberMe, captcha);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData());\r\n        } else {\r\n            \r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n        \r\n            let message = response.data.messages.length > 0 ? response.data.messages[0]: \"Some error\"\r\n            let action = stopSubmit(\"login\", {_error: message});\r\n            dispatch(action);\r\n        }                                       \r\n}\r\n*/\n\nexport const logout = () => async dispatch => {\n  let response = await Auth.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/designer/GitHub/SocialNet20/src/redux/auth-reducer.ts"],"names":["Auth","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","captcha","logout"],"mappings":"AACA,SAASA,IAAT,QAAqB,YAArB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,uBAAuB,GAAG,yBAAhC,C,CACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAG,IADM;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO;AAKfC,EAAAA,UAAU,EAAE;AALG,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAyD;AAEzE,UAAOA,MAAM,CAACC,IAAd;AACqB,SAAKX,aAAL;AACA,SAAKC,uBAAL;AAEA,aAAO;AACHE,QAAAA,MAAM,EAAE,GADL;AAEE,WAAGM,KAFL;AAGE,WAAGC,MAAM,CAACE;AAHZ,OAAP;;AAMrB;AACQ,aAAOH,KAAP;AAXR;AAcC,CAhBL;;AA8BA,OAAO,MAAMI,eAAe,GAAG,CAACV,MAAD,EAAwBC,KAAxB,EAA8CC,KAA9C,EAAoEC,MAApE,KAAkH;AAC5I,SAAS;AACLK,IAAAA,IAAI,EAAEX,aADD;AAELY,IAAAA,OAAO,EAAE;AAACT,MAAAA,MAAD;AAASC,MAAAA,KAAT;AAAgBC,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB;AAFJ,GAAT;AAGQ,CAJN;AAYP,OAAO,MAAMQ,oBAAoB,GAAIP,UAAD,IAAwD;AACxF,SAAQ;AACJI,IAAAA,IAAI,EAAEV,uBADF;AAEJW,IAAAA,OAAO,EAAE;AAACL,MAAAA;AAAD;AAFL,GAAR;AAIK,CALF;AAOP,OAAO,MAAMQ,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAyB;AAC1D,MAAIC,QAAQ,GAAG,MAAMlB,IAAI,CAACmB,EAAL,EAArB;;AAEQ,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AACpC,QAAI;AAAChB,MAAAA,KAAD;AAAQiB,MAAAA,EAAR;AAAYhB,MAAAA;AAAZ,QAAqBY,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAH,IAAAA,QAAQ,CAACH,eAAe,CAACQ,EAAD,EAAKjB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACR,CAPM;AAQP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAgBkB,QAAhB,EAAkCC,UAAlC,EAAuDC,OAAvD,KAA2E,MAAOR,QAAP,IAAyB;AACrH,MAAIC,QAAQ,GAAG,MAAMlB,IAAI,CAACM,KAAL,CAAWD,KAAX,EAAkBkB,QAAlB,EAA4BC,UAA5B,CAArB;;AACK,MAAIN,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC,CAAE;AAC9C,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMK,MAAM,GAAG,MAAM,MAAOT,QAAP,IAAyB;AACjD,MAAIC,QAAQ,GAAG,MAAMlB,IAAI,CAAC0B,MAAL,EAArB;;AACQ,MAAIR,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AACpCJ,IAAAA,QAAQ,CAACH,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACR,CALM;AAQP,eAAeL,WAAf","sourcesContent":["import { stopSubmit } from 'redux-form';\r\nimport { Auth } from '../api/api';\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\r\n// s2000promax@gmail.com\r\n// qh5S!C2s!x3MNvB\r\n/*\r\nexport type InitialStateType2 = {\r\n    userId : number | null, \r\n    email: string | null, \r\n    login: string | null,\r\n    isAuth: boolean,\r\n    captchaUrl: string | null\r\n}\r\n*/\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nlet initialState = { \r\n    userId : null as number | null, \r\n    email: null as string | null, \r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n                   };\r\n\r\nconst authReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    switch(action.type) {\r\n                         case SET_USER_DATA: \r\n                         case GET_CAPTCHA_URL_SUCCESS:\r\n                         \r\n                         return {\r\n                             userId: 123,\r\n                                  ...state, \r\n                                  ...action.payload\r\n                                 }\r\n                          \r\n    default: \r\n            return state;\r\n       } \r\n\r\n    }\r\n\r\ntype setAuthUserDataPayloadType = {\r\n    userId: number | null,\r\n    email: string | null, \r\n    login: string | null, \r\n    isAuth: boolean | null \r\n}\r\n\r\ntype setAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA, \r\n    payload: setAuthUserDataPayloadType\r\n}    \r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean):setAuthUserDataActionType => {\r\n     return ( { \r\n         type: SET_USER_DATA, \r\n         payload: {userId, email, login, isAuth} \r\n        } ) }\r\n\r\n   type getCaptchaUrlSuccessActionType = {\r\n       type: typeof GET_CAPTCHA_URL_SUCCESS\r\n       payload: { captchaUrl: string }\r\n\r\n   }\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): getCaptchaUrlSuccessActionType => {\r\n    return ({\r\n        type: GET_CAPTCHA_URL_SUCCESS,\r\n        payload: {captchaUrl}\r\n\r\n    } ) }\r\n\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n    let response = await Auth.me();\r\n    \r\n            if (response.data.resultCode === 0) {\r\n            let {email, id, login} = response.data.data;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }       \r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n    let response = await Auth.login(email, password, rememberMe);\r\n         if (response.data.resultCode === 0) {}\r\n}\r\n             \r\n/*   \r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n   let response = await Auth.login(email, password, rememberMe, captcha);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData());\r\n        } else {\r\n            \r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n        \r\n            let message = response.data.messages.length > 0 ? response.data.messages[0]: \"Some error\"\r\n            let action = stopSubmit(\"login\", {_error: message});\r\n            dispatch(action);\r\n        }                                       \r\n}\r\n*/\r\n   \r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await Auth.logout();\r\n            if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));\r\n        }                                       \r\n}\r\n   \r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}