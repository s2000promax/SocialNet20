{"ast":null,"code":"var _jsxFileName = \"/home/designer/GitHub/SocialNet20/src/Components/Common/Paginator/Paginator.jsx\";\nimport React, { useState } from 'react';\nimport styles from './Paginator.module.css';\nimport cn from \"classnames\";\n\nlet Paginator = ({\n  totalItemsCount,\n  pageSize,\n  currentPage,\n  onPageChanged,\n  portionSize = 10\n}) => {\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  } // debugger\n\n\n  let portionCount = Math.ceil(pagesCount / portionSize); //debugger\n\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize; //debugger\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.paginator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }\n  }, portionNumber > 1 && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber - 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, \" PREV \"), pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: cn({\n        [styles.selectedPage]: currentPage === p\n      }, styles.pageNumber),\n      key: p,\n      onClick: e => {\n        onPageChanged(p);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 24\n      }\n    }, p);\n  }), portionCount > portionNumber && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"NEXT\"));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["/home/designer/GitHub/SocialNet20/src/Components/Common/Paginator/Paginator.jsx"],"names":["React","useState","styles","cn","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","filter","p","map","selectedPage","pageNumber","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;;AAEA,IAAIC,SAAS,GAAG,CAAC;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA,QAAnB;AAA6BC,EAAAA,WAA7B;AAA0CC,EAAAA,aAA1C;AAAyDC,EAAAA,WAAW,GAAG;AAAvE,CAAD,KAAiF;AAE7F,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,eAAe,GAAGC,QAA5B,CAAjB;AAEA,MAAIO,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAAED,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AAAe,GALsC,CAM9F;;;AAEC,MAAIE,YAAY,GAAGL,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAGD,WAAvB,CAAnB,CAR6F,CAS7F;;AACA,MAAI,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIkB,qBAAqB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBR,WAAtB,GAAoC,CAAhE;AACA,MAAIW,sBAAsB,GAAGH,aAAa,GAAGR,WAA7C,CAZ6F,CAa7F;;AAIA,sBAAO;AAAK,IAAA,SAAS,EAAEP,MAAM,CAACmB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACFJ,aAAa,GAAG,CAAhB,iBACG;AAAQ,IAAA,OAAO,EAAE,MAAM;AAAEC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAqC,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,EAIFJ,KAAK,CACDS,MADJ,CACYC,CAAC,IAAIA,CAAC,IAAGJ,qBAAJ,IAA6BI,CAAC,IAAIH,sBADnD,EAEII,GAFJ,CAESD,CAAD,IAAO;AACR,wBAAO;AAAM,MAAA,SAAS,EAAEpB,EAAE,CAAC;AACvB,SAACD,MAAM,CAACuB,YAAR,GAAuBlB,WAAW,KAAKgB;AADhB,OAAD,EAEvBrB,MAAM,CAACwB,UAFgB,CAAnB;AAIH,MAAA,GAAG,EAAEH,CAJF;AAKH,MAAA,OAAO,EAAGI,CAAD,IAAO;AACZnB,QAAAA,aAAa,CAACe,CAAD,CAAb;AACH,OAPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQFA,CARE,CAAP;AAUH,GAbJ,CAJE,EAkBFP,YAAY,GAAGC,aAAf,iBACG;AAAQ,IAAA,OAAO,EAAG,MAAM;AAAEC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAqC,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBD,CAAP;AAwBH,CAzCD;;AA2CA,eAAeb,SAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport cn from \"classnames\";\r\n\r\nlet Paginator = ({ totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10 }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) { pages.push(i) }\r\n   // debugger\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    //debugger\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    //debugger\r\n\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n            <button onClick={() => { setPortionNumber(portionNumber - 1) }}> PREV </button>}\r\n\r\n        {pages\r\n            .filter( p => p>= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p);\r\n                    }}>\r\n                    {p}\r\n                </span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n            <button onClick={ () => { setPortionNumber(portionNumber + 1) }}>NEXT</button>\r\n\r\n        }\r\n\r\n    </div >\r\n}\r\n\r\nexport default Paginator;   "]},"metadata":{},"sourceType":"module"}