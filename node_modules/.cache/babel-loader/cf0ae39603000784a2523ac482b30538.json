{"ast":null,"code":"import { profileAPI, usersAPI } from '../api/api';\nconst ADD_POST = 'ADD_POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst DELETE_POST = 'DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'Hi, how are you?',\n    likescount: 12\n  }, {\n    id: 2,\n    message: 'Its my first post',\n    likescount: 11\n  }, {\n    id: 3,\n    message: 'Da-Da',\n    likescount: 112\n  }, {\n    id: 4,\n    message: 'Na-Na-NNNNNNNfff',\n    likescount: 888\n  }],\n  profile: null,\n  status: '',\n  newPostText: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          id: 7,\n          message: action.newPostText,\n          likescount: 0\n        };\n        return { ...state,\n          posts: [...state.posts, newPost],\n          newPostText: ''\n        };\n      }\n\n    case SET_USER_PROFILE:\n      return { ...state,\n        profile: action.profile\n      };\n\n    case SET_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(p => p.id != action.postId)\n      };\n\n    case SAVE_PHOTO_SUCCESS:\n      return { ...state,\n        profile: { ...state.profile,\n          photos: action.photos\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostActionCreator = newPostText => {\n  return {\n    type: ADD_POST,\n    newPostText\n  };\n};\nexport const setUserProfile = profile => {\n  return {\n    type: SET_USER_PROFILE,\n    profile\n  };\n};\nexport const setStatus = status => {\n  return {\n    type: SET_STATUS,\n    status\n  };\n};\nexport const deletePost = postId => {\n  return {\n    type: DELETE_POST,\n    postId\n  };\n};\nexport const savePhotoSuccess = photos => {\n  return {\n    type: SAVE_PHOTO_SUCCESS,\n    photos\n  };\n};\nexport const getUserProfile = userId => async dispatch => {\n  const response = await usersAPI.getProfile(userId);\n  dispatch(setUserProfile(response.data));\n};\nexport const getStatus = userId => async dispatch => {\n  const response = await profileAPI.getStatus(userId);\n  dispatch(setStatus(response.data));\n};\nexport const updateStatus = status => async dispatch => {\n  try {\n    let response = await profileAPI.getUpdateStatus(status);\n\n    if (response.data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  } catch (error) {//\n  }\n};\n/*\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n       let response = await profileAPI.savePhoto(file);\r\n            if (response.data.resultCode === 0) {\r\n                        dispatch(savePhotoSuccess(response.data.data.photos));\r\n                         }\r\n                      \r\n} \r\n\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.userId;\r\n       let response = await profileAPI.saveProfile(profile);\r\n            if (response.data.resultCode === 0) {\r\n                        dispatch(getUserProfile(userId));\r\n                         } else {\r\n                             dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}))\r\n                             return Promise.reject(response.data.messages[0])\r\n                         }\r\n                      \r\n} \r\n*/\n\nexport default profileReducer;","map":{"version":3,"sources":["/home/designer/GitHub/SocialNet20/src/redux/profile-reducer.ts"],"names":["profileAPI","usersAPI","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","initialState","posts","id","message","likescount","profile","status","newPostText","profileReducer","state","action","type","newPost","filter","p","postId","photos","addPostActionCreator","setUserProfile","setStatus","deletePost","savePhotoSuccess","getUserProfile","userId","dispatch","response","getProfile","data","getStatus","updateStatus","getUpdateStatus","resultCode","error"],"mappings":"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","sourcesContent":["import { stopSubmit } from 'redux-form';\r\nimport { profileAPI, usersAPI } from '../api/api';\r\nimport {PostType, ContactsType, ProfileType, PhotosType} from '../types/types'\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS='SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst SAVE_PHOTO_SUCCESS='SAVE_PHOTO_SUCCESS'\r\n\r\n\r\n\r\nlet initialState = {\r\n    posts : [\r\n        {id: 1, message: 'Hi, how are you?', likescount: 12},\r\n        {id: 2, message: 'Its my first post', likescount: 11},\r\n        {id: 3, message: 'Da-Da', likescount: 112},\r\n        {id: 4, message: 'Na-Na-NNNNNNNfff', likescount: 888}\r\n      ]as Array<PostType>,\r\n\r\nprofile: null as ProfileType | null,\r\nstatus: '',\r\nnewPostText : ''\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: any):InitialStateType => {\r\n\r\n    switch(action.type) {\r\n                          case ADD_POST: {\r\n                              let newPost = {\r\n                                id: 7,\r\n                                message: action.newPostText,\r\n                                likescount: 0   \r\n                              }\r\n                              return {\r\n                                ...state,\r\n                                posts: [...state.posts, newPost],\r\n                             newPostText : ''\r\n                              }\r\n                          }\r\n                                            \r\n     case SET_USER_PROFILE:       \r\n                                        return {\r\n                                                ...state,\r\n                                               profile: action.profile\r\n                                                }\r\n\r\n     case SET_STATUS:       \r\n                                        return {\r\n                                                ...state,\r\n                                               status: action.status\r\n                                                }\r\n\r\n     case DELETE_POST:       \r\n                                        return {\r\n                                                ...state,\r\n                                               posts: state.posts.filter(p=>p.id != action.postId)\r\n                                                }\r\n                                                \r\n     case SAVE_PHOTO_SUCCESS:       \r\n                                        return {\r\n                                                ...state,\r\n                                               profile: {...state.profile, photos: action.photos} as ProfileType\r\n                                                }\r\n\r\n    default: \r\n            return state;\r\n       } \r\n\r\n    }\r\n\r\n    type AddPostActionCreatorActionType = {\r\n        type: typeof ADD_POST\r\n        newPostText: string\r\n    }\r\n    \r\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorActionType => { return ( { type: ADD_POST, newPostText } ) }\r\n\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => { return ( { type: SET_USER_PROFILE, profile  } ) }\r\n\r\ntype SetStatusActionType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\n\r\nexport const setStatus = (status: string):SetStatusActionType => { return ( { type: SET_STATUS, status  } ) }\r\n\r\ntype DeletePostActionType = {\r\n    type: typeof DELETE_POST\r\n    postId: number\r\n}\r\n\r\nexport const deletePost = (postId: number):DeletePostActionType => {return ( { type: DELETE_POST, postId } ) }\r\n\r\ntype SavePhotoSuccessType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photos: PhotosType\r\n}\r\n\r\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessType => {return ( { type: SAVE_PHOTO_SUCCESS, photos } ) }\r\n\r\n\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: any) => {\r\n   const response = await usersAPI.getProfile(userId);\r\n   dispatch(setUserProfile(response.data));\r\n} \r\n\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n    const response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data));\r\n} \r\n\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    try\r\n    {\r\n    let response = await profileAPI.getUpdateStatus(status);\r\n            if (response.data.resultCode === 0) {\r\n                        dispatch(setStatus(status));\r\n                         }\r\n                        }\r\n                        catch(error) {\r\n                            //\r\n                        }\r\n} \r\n/*\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n       let response = await profileAPI.savePhoto(file);\r\n            if (response.data.resultCode === 0) {\r\n                        dispatch(savePhotoSuccess(response.data.data.photos));\r\n                         }\r\n                      \r\n} \r\n\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.userId;\r\n       let response = await profileAPI.saveProfile(profile);\r\n            if (response.data.resultCode === 0) {\r\n                        dispatch(getUserProfile(userId));\r\n                         } else {\r\n                             dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}))\r\n                             return Promise.reject(response.data.messages[0])\r\n                         }\r\n                      \r\n} \r\n*/\r\n\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}